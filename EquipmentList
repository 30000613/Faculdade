package gestormaterialescutista;


import Configurações.SaveFileWindow;
import Configurações.ExcelReader;
import Configurações.SUnidades_List;
import Configurações.Unidades_List;
import Configurações.Perfil_List;
import Configurações.TipoEquipamento_List;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Workbook;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Utilizador
 */
public class EquipmentList extends javax.swing.JFrame {

    /**
     * Creates new form EquipmentList
     */
    public EquipmentList() {
        initComponents();
        PopulateTable();
        
    }


    
    
    public void PopulateTable() {
    try{
      int i=0;
     Class.forName("org.apache.derby.jdbc.ClientDriver");
    Connection con=DriverManager.getConnection("jdbc:derby://localhost:1527/ScoutsDB_DEV","AdminA","123456");  
    Statement st = con.createStatement();
    String query_Select = "SELECT EQUIPAMENTOS.NOME,"
            + "                   EQUIPAMENTOS.DESCRICAO,"
            + "                   TIPOS_EQUIPAMENTO.NOME, "
            + "                   UNIDADES.CODIGO, "
            + "                   SUBUNIDADES.CODIGO,"
            + "                   TIPOS_EQUIPAMENTO.CODIGO,"
            + "                   EQUIPAMENTOS.CODIGO,"
            + "                   EQUIPAMENTOS.EQUIPAMENTO_ID"
            + "                   FROM ADMINA.EQUIPAMENTOS \n" +
                                "left join EQUIPAMENTOS_UNIDADES on EQUIPAMENTO_ID = EQUIPAMENTO_FK\n" +
                                "left join UNIDADES on UNIDADE_FK= UNIDADE_ID\n" +
                                "left join SUBUNIDADES on SUBUNI_FK = SUBUNIDADE_ID\n" +
                                "left join TIPOS_EQUIPAMENTO on EQUIPAMENTOS.TIPO = TIPOS_EQUIPAMENTO.TE_ID\n" +"";
                          
    

    ResultSet rs = st.executeQuery(query_Select);
    ResultSetMetaData rsmd= rs.getMetaData();
    
    DefaultTableModel model = (DefaultTableModel) EquipmentTable.getModel();
    
     String[] columns = new String[5];
     
     columns[0] = "Codigo";
     columns[1] = "Nome";
     columns[2] = "Descricao";
     columns[3] = "Tipo Equipamento";
     columns[4] = "ID";
     
    model.setColumnIdentifiers(columns);
    
    
    while(rs.next()){
     String CodeBuilder="1240."+rs.getString(4)+rs.getString(5)+"."+rs.getString(6)+rs.getString(7); 
     String data[] = {CodeBuilder.trim() ,rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(8)};
     
    model.addRow(data);
    }
    st.close();
    con.close();
     
    }catch(Exception e){e.printStackTrace();};
           
    
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        EquipmentTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        PerfisShortcut = new javax.swing.JMenuItem();
        SubUnidadesShortcut = new javax.swing.JMenuItem();
        UnidadesShortcut = new javax.swing.JMenuItem();
        TipoEquipamentoShortcut = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        jMenu3.setText("jMenu3");

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        EquipmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        EquipmentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EquipmentTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(EquipmentTable);
        EquipmentTable.getAccessibleContext().setAccessibleName("");

        jButton1.setText("Exportar Template");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Import");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Novo Equipamento");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jMenu2.setText("Configurações");

        PerfisShortcut.setText("Perfis");
        PerfisShortcut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PerfisShortcutActionPerformed(evt);
            }
        });
        jMenu2.add(PerfisShortcut);

        SubUnidadesShortcut.setText("Sub-Unidades");
        SubUnidadesShortcut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubUnidadesShortcutActionPerformed(evt);
            }
        });
        jMenu2.add(SubUnidadesShortcut);

        UnidadesShortcut.setText("Unidades");
        UnidadesShortcut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UnidadesShortcutActionPerformed(evt);
            }
        });
        jMenu2.add(UnidadesShortcut);

        TipoEquipamentoShortcut.setText("Tipo de Equipamento");
        TipoEquipamentoShortcut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TipoEquipamentoShortcutActionPerformed(evt);
            }
        });
        jMenu2.add(TipoEquipamentoShortcut);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton3)
                        .addComponent(jButton1)))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(74, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>                        

    private void EquipmentTableMouseClicked(java.awt.event.MouseEvent evt) {                                            
        // TODO add your handling code here:
        int column = 4;
        int row = EquipmentTable.getSelectedRow();
        String value =  EquipmentTable.getModel().getValueAt(row, column).toString();
        EquipmentDetailPage EDP = new EquipmentDetailPage(Integer.parseInt(value));
        
        EDP.show();
        dispose();
    }                                           

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        String Path = "C:\\Users\\Utilizador\\Desktop\\";
        String FileName="Exercicio 3A.docx";

        try {
            Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler "+Path+FileName);
        } catch (IOException ex) {
            Logger.getLogger(EquipmentList.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("it works!");
        
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
         
       JFileChooser fileChooser = new JFileChooser();
       int returnVal = fileChooser.showOpenDialog(this);
       if(returnVal == JFileChooser.APPROVE_OPTION){
           File file = fileChooser.getSelectedFile();
         String keep = file.getAbsolutePath();
           try {
               // File file = fileChooser.getSelectedFile();
               ExcelReader ExR = new ExcelReader(keep);
           } catch (IOException ex) {
               Logger.getLogger(SaveFileWindow.class.getName()).log(Level.SEVERE, null, ex);
           } catch (SQLException ex) {
               Logger.getLogger(EquipmentList.class.getName()).log(Level.SEVERE, null, ex);
           }
           }
       else System.out.println("Erro ao escolher o ficheiro");
      
    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
       
        try {
            EquipmentInsert EI = new EquipmentInsert();
            EI.show();
            dispose();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EquipmentList.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(EquipmentList.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }                                        

    private void TipoEquipamentoShortcutActionPerformed(java.awt.event.ActionEvent evt) {                                                        
            TipoEquipamento_List TeShortcut = new TipoEquipamento_List();
            TeShortcut.show();
            dispose();
           
    }                                                       

    private void UnidadesShortcutActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        Unidades_List U_shortcut = new Unidades_List();
        U_shortcut.show();
        dispose();
        
    }                                                

    private void SubUnidadesShortcutActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        SUnidades_List SU_shortcut = new SUnidades_List();
        SU_shortcut.show();
        dispose();
        
    }                                                   

    private void PerfisShortcutActionPerformed(java.awt.event.ActionEvent evt) {                                               
       Perfil_List perfil_shortcut = new Perfil_List();
       perfil_shortcut.show();
     
        
    }                                              

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
     
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EquipmentList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EquipmentList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EquipmentList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EquipmentList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EquipmentList().setVisible(true);
            }
        
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTable EquipmentTable;
    private javax.swing.JMenuItem PerfisShortcut;
    private javax.swing.JMenuItem SubUnidadesShortcut;
    private javax.swing.JMenuItem TipoEquipamentoShortcut;
    private javax.swing.JMenuItem UnidadesShortcut;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration                   
}
